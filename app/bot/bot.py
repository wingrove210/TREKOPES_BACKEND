import json
from typing import Union, Dict, Any
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Filter
from core.config import settings
from aiogram.filters import CommandStart
import aiohttp
import asyncio

import logging
logging.basicConfig(level=logging.INFO)


# bot = Bot(settings.TEST_BOT_TOKEN if settings.ENVIRONMENT == "development" else settings.BOT_TOKEN)
bot = Bot(settings.TEST_BOT_TOKEN)
dp = Dispatcher()# –ü–µ—Ä–µ–¥–∞–π—Ç–µ bot —è–≤–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling

def get_redis_data(key):
    redis_client = settings.get_redis()
    payload = redis_client.get(key)
    if not payload:
        return None
    try:
        return json.loads(payload)
    except json.JSONDecodeError:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –∫–ª—é—á–∞ {key}")
        return None
    

class WebAppDataFilter(Filter):
    async def __call__(self, message: types.Message, **kwds) -> Union[bool, Dict[str, Any]]:
        return dict(web_app_data=message.web_app_data) if message.web_app_data else False

async def send_message_to_admins(message: str):
    chats = ["6398268582", "1372814991", "6035406614", "251173063"]
    url = f"https://api.telegram.org/bot{settings.ADMIN_BOT_TOKEN}/sendMessage"

    async with aiohttp.ClientSession() as session:
        tasks = [
            session.get(url, params={"chat_id": chat_id, "parse_mode": "markdown", "text": message})
            for chat_id in chats
        ]
        await asyncio.gather(*tasks)

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    caption = (
        "üé§üê∂ –ì–∞–≤-–ì–∞–≤! –Ø –¢—Ä–µ–∫–æ–ø—ë—Å ‚Äî —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –¥—Ä—É–≥!\n"
        "–ó–∞ 5 –º–∏–Ω—É—Ç –∏ –ø–æ —Ü–µ–Ω–µ —Å–æ—Å–∏—Å–∫–∏ –Ω–∞–ø–∏—à—É —Ç–µ–±–µ —Ö–∏—Ç! üöÄüéß\n\n"
        "üé∂ –°–∫–∞–∂–∏, –∫–æ–º—É —Ç—Ä–µ–∫? üíñ –î–ª—è –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n"
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è –±–ª–∏–∑–∫–∏—Ö\n"
        "üéì –î–ª—è –¥—Ä—É–∑–µ–π –∏ –∫–æ–ª–ª–µ–≥\n"
        "üéñÔ∏è –û –≥–µ—Ä–æ–µ –∏–ª–∏ —Å–æ–ª–¥–∞—Ç–µ\n"
        "üçº –ü—Ä–æ —Ä–µ–±—ë–Ω–∫–∞\n"
        "üéà –ü—Ä–∞–∑–¥–Ω–∏–∫ –∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        "üôã‚Äç‚ôÇÔ∏è –ü—Ä–æ —Å–µ–±—è / –º–æ—Ç–∏–≤–∞—Ü–∏—è\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–≥–∞–≤–∫–∞–π –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üéôÔ∏è –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏ —Å—Ç–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É üìù‚ú® ‚Äî –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫!\n\n"
        "–°–∫–æ—Ä–µ–µ —Å–∫–∞–∂–∏ –º–Ω–µ \"–ê–ø–æ—Ä—Ç\"! üêæ –í—É—Ñ-–≤—É—É—Ñ! üêï"
    )
    photo = settings.TREKOPES_IMAGE
    adminTG = "https://t.me/PATRIOT_MNGR"
    comments_tg = "https://t.me/patriotComments"
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url="https://suna-bot.netlify.app/")],
            [types.InlineKeyboardButton(text="–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url=adminTG)], 
                         [types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", url=comments_tg)]]
    )
    await message.answer_photo(photo=photo, caption=caption, reply_markup=keyboard)


@dp.pre_checkout_query()
async def pre_checkout_handler(query: types.PreCheckoutQuery):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω pre_checkout –∑–∞–ø—Ä–æ—Å –æ—Ç {query.from_user.id}: {query.invoice_payload}")
    await query.answer(ok=True)
            
@dp.message(F.successful_payment)
async def message_send(message: types.SuccessfulPayment):
    try:
        data = get_redis_data(message.successful_payment.invoice_payload)
        if data is None:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis: {message.successful_payment.invoice_payload}")
            return 

        logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {data}")
        admin_message = settings.get_application_message(data=data, type="admin")
        user_message = settings.get_application_message(data=data, type="user")

        await message.answer(user_message, parse_mode="markdown")
        await send_message_to_admins(admin_message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

if __name__ == "__main__" :
    asyncio.run(dp.start_polling(bot))